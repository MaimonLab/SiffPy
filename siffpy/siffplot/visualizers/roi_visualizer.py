from siffpy.siffplot.siffvisualizer import SiffVisualizer
from siffpy.siffplot.napari_viewers import ROIViewer
from siffpy.siffplot import roi_protocols

from siffpy.core import SiffReader

class ROIVisualizer(SiffVisualizer):
    """
    Extends the SiffVisualizer to provide
    annotation of reference frames to select
    ROIs.
    """
    def __init__(self, siffreader : SiffReader):
        super().__init__(siffreader)
        self.image_opts['clim'] = (0,1) # defaults to highest contrast

    def draw_rois(self, **kwargs)->None:
        """
        Returns a napari Viewer object that shows
        the reference frames of the .siff file and
        a layer for overlaying drawn polygons and shapes.
        """
        if not hasattr(self.siffreader, 'reference_frames'):
            raise AssertionError("SiffReader has no registered reference frames.")

        self.viewer = ROIViewer(self.siffreader, visualizer = self, title='Annotate ROIs')
        self.viewer.viewer.layers.selection = [self.viewer.viewer.layers['ROI shapes']] # selects the ROI drawing layer
        self.viewer.save_rois_fcn = self.save_rois

    def extract_rois(self, region : str, *args, method_name : str = None, overwrite : bool = True, **kwargs) -> None:
        """
        Extract ROIs -- uses a different method for each anatomical region.
        ROIs are stored in a class attribute. Must have drawn at least one
        manual ROI on at least one image stored in the SiffPlotter's annotation dict
        or in a napari Viewer generated by this SiffPlotter.

        To learn more about 

        Parameters
        ----------
        
        region : str

            Name of the region of interest. Current protocols are for the FB, EB, and PB.

        method_name : str (optional)

            Which ROI extraction method to use. For a list, call siffplot.ROI_fitting_methods()

        overwrite : bool (optional)

            If set to True, overwrites self.rois rather than appending to it. Default is True.
        
        Returns
        -------

        None

        """

        if not hasattr(self,'viewer'):
            raise AssertionError("No associated napari viewer. Try draw_rois()!")

        self.region = roi_protocols.region_name_proper(region)
        
        # Make sure the napari viewer has a layer named ROI viewer
        try:
            filter(lambda layer: layer.name == 'ROI shapes', self.viewer.layers),            
        except Exception:
            raise AssertionError("Failed to identify an ROI shapes layer.")

        rois = roi_protocols.roi_protocol(
            region,
            method_name,
            self.siffreader.reference_frames,
            self.viewer,
            **kwargs
        )
        
        # Now we have the ROIs, time to
        # make a reference to them that
        # survives so they won't be garbage
        # collected.

        if overwrite:
            # overwrites the current set
            # and returns
            if not type(rois) is list:
                self.rois = [rois]
            else:
                self.rois = rois
            return

        if hasattr(self, 'rois'):
            if type(self.rois) is list:
                if not type(rois) is list:
                    self.rois.append(rois)
                else:
                    self.rois += rois
            else:
                self.rois = [self.rois, rois]
        else:
            if not type(rois) is list:
                self.rois = [rois]
            else:
                self.rois = rois
        
        if self.rois is None:
            raise RuntimeError("No rois extracted -- check method used, images provided, etc.")
    
    def redraw_rois(self):
        """ Redraws the rois, for example after segmentation. """
        raise NotImplementedError()

    def __getattribute__(self, name: str):
        """
        To make it easier to access when there's only one ROI
        (there's something gross about having to have a bunch of [0]
        sitting around in your code)
        """
        if name == 'rois':
            roi_ref = object.__getattribute__(self, name)
            if type(roi_ref) is list:
                if len(roi_ref) == 1:
                    return roi_ref[0]
            return roi_ref
        else:
            return object.__getattribute__(self, name)
